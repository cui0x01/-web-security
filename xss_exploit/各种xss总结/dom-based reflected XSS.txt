基于Dom的反射型XSS

通常是由于客户端脚本（javascript）在编写时，未注意安全问题而导致的。

网页为其它程序或脚本提供了一个接口(Document Object Model, 简称Dom), 在常规的网页里，我们可以使用javascript通过这个DOM接口对网页里的各个元素实现动态的操作。

例如：改变元素的宽度，高度，或者是改变网页元素的内容。但是在这些操作背后，也同样存在安全问题，可能导致XSS的发生。

Dom类型的XSS，通常不会被目前主流的浏览器拦截。

有一些缺陷，如document.write或innerHTML带来的输出，会被某些浏览器拦截，例如IE9。

另外，普通的WEB扫描器，很难发现此类漏洞，当然一些IT公司有专门针对此类漏洞检测的扫描器。

例子：
http://xsst.sinaapp.com/example/1-3.htm?url=./iframe.htm
http://xsst.sinaapp.com/example/1-3.htm?url=http://www.baidu.com


http://xsst.sinaapp.com/example/1-3.htm?url=javascript:alert(document.cookie)


特点：
1. 利用代码也是在地址栏里输入，

2. 在JS里，通过location.search得到地址里的代码，类似的还有:

 A.location.href : 地址栏里的地址,

 B.location.hash: 地址栏里#及其之后的内容,

 C.document.referrer: 当前页面的源（比如你从A.com点一个链接进入了B.com，那么B.com里的document.referrer等于A.com）

3.  通过JS设置了iframe的src属性，这是一个典型的通过JS操作属性而导致的XSS。



Dom-based Xss 的其它被利用的形式：

	
使用document.write造成的XSS （会被IE拦截,Chrome下参数中<,>被自动编码导致无效）

	
使用eval造成的XSS

	
使用innerHTML造成的XSS （会被IE拦截,Chrome下参数中<,>被自动编码导致无效）

	
使用location/location.href/location.replace/iframe.src造成的XSS

	
使用setTimeout/setInterval造成的XSS




学完上面这几个例子，Dom-based Xss，就了解的差不多啦！在实际查找此类漏洞时，通常以下步骤：

1. 以location为关键词进行查找，
2. 进而看location传入的参数是否被过滤后再进行使用。
3. 如有未过滤而被调用的情况，则考虑如何构造利用代码。

